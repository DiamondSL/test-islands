{"version":3,"file":"index.f2fb2514.js","sources":["../../src/components/island-components/island.tsx","../../src/components/section/HeroSection.tsx","../../src/pages/home/index.tsx"],"sourcesContent":["import {Col, Row} from \"antd\";\r\nimport './island.less';\r\n\r\ntype islandsArray = number[][]\r\n\r\nconst Island = () => {\r\nlet mapArray:islandsArray = []\r\nlet islands = 0;\r\n\r\n  let getRandomInt = (max:number) => {\r\n    return Math.floor(Math.random() * max);\r\n  }\r\n\r\n  let createIsland = (grids:number) => {\r\n    while (mapArray.length != grids) {\r\n      let island = [];\r\n      while (island.length !== 5){\r\n        let randomNumber = Number();\r\n        randomNumber = getRandomInt(2);\r\n        island.push(randomNumber);\r\n      }\r\n      mapArray.push(island);\r\n      island = [];\r\n    }\r\n  }\r\n\r\n  let checkIslandsAmount = (array:islandsArray) => {\r\n    let isIslandsActive:boolean;\r\n    array.forEach((children, index) => {\r\n      let previousLand: number[] = [];\r\n      children.forEach((item, index) => {\r\n        if(previousLand.length === 0) {\r\n          let itemIndex = children.filter((item, index) => {\r\n            if (item === 1) {\r\n              previousLand.push(index);\r\n            }\r\n          })\r\n        }\r\n        else {\r\n            if(item === 1){\r\n              if(previousLand.some(item => item === index)){\r\n                isIslandsActive = true;\r\n              }\r\n            }\r\n            previousLand = [];\r\n            let itemIndex = children.filter((item, index) => {\r\n            if (item === 1) {\r\n              previousLand.push(index);\r\n            }\r\n          })\r\n        }\r\n      })\r\n      isIslandsActive && islands++\r\n    })\r\n  }\r\n  createIsland(5)\r\n  checkIslandsAmount(mapArray);\r\n\r\n  return (\r\n    <Row justify={'center'} className={'island-row'}>\r\n      <Col span={24} className={'container'}>\r\n        <Row className={'island-count'} justify={'center'}>\r\n          <Col span={6}>\r\n            Islands amount is: {islands}\r\n          </Col>\r\n        </Row>\r\n        {mapArray.map((item, index) => (\r\n          <Row key={index} className={'map'} justify={'center'}>\r\n          {item.map((it, index, array) => {\r\n            if(it === 1){\r\n              return <Col className={'island'} style={{backgroundColor: '#AFE1AF'}} key={index} span={24/item.length}>{it}</Col>\r\n            }\r\n            else if (it === 0){\r\n              return <Col className={'water'} style={{backgroundColor: '#87CEEB'}} key={index}  span={24/item.length}>{it}</Col>\r\n            }\r\n          })}\r\n          </Row>\r\n          ))}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Island;","import { VFC } from 'react'\r\nimport { Col, Row, Typography } from 'antd'\r\n\r\nconst HeroSection: VFC<Partial<CardFragment>> = ({ title = '', description = '', subtitle = '' }) => (\r\n  <Row align={'middle'} justify={'center'}>\r\n    <Col span={24}>\r\n      <Typography.Title level={2}>{title}</Typography.Title>\r\n    </Col>\r\n    <Col span={24}>\r\n      <Typography.Paragraph>{subtitle}</Typography.Paragraph>\r\n    </Col>\r\n    <Col span={24}>\r\n      <Typography.Paragraph>\r\n        {description?.split('\\n').map((it, index) => (\r\n          <span key={index}>\r\n            {it}\r\n            <br />\r\n          </span>\r\n        ))}\r\n      </Typography.Paragraph>\r\n    </Col>\r\n  </Row>\r\n)\r\n\r\nexport { HeroSection }\r\n","import { FC } from 'react'\r\nimport { Layout } from 'antd'\r\nimport { useOutletContext } from 'react-router-dom'\r\nimport Island from \"src/components/island-components/island\";\r\nimport { HeroSection } from 'src/components/section'\r\n\r\nconst Home: FC = () => {\r\n  const props = useOutletContext<HomeFragment>()\r\n  return <Layout.Content>{props && <HeroSection {...props.hero} />}\r\n    {<Island />}\r\n  </Layout.Content>\r\n}\r\n\r\nexport { Home as default }\r\n"],"names":["Island","mapArray","islands","getRandomInt","max","Math","floor","random","createIsland","grids","length","island","randomNumber","Number","push","checkIslandsAmount","array","isIslandsActive","forEach","children","index","previousLand","item","filter","some","map","it","backgroundColor","HeroSection","title","description","subtitle","split","Home","props","useOutletContext","hero"],"mappings":"2PAKA,KAAMA,SAAe,IACjBC,GAAwB,GACxBC,EAAU,EAERC,IAAgBC,GACXC,KAAKC,MAAMD,KAAKE,SAAWH,GADjB,gBAIfI,IAAgBC,GAAiB,MAC5BR,EAASS,QAAUD,GAAO,IAC3BE,GAAS,QACNA,EAAOD,SAAW,GAAE,IACrBE,GAAeC,WACJV,EAAa,KACrBW,KAAKF,KAELE,KAAKH,KACL,KATM,gBAafI,IAAsBC,GAAuB,IAC3CC,KACEC,QAAQ,CAACC,EAAUC,IAAU,IAC7BC,GAAyB,KACpBH,QAAQ,CAACI,EAAMF,IAAU,CAC7BC,EAAaX,SAAW,EACTS,EAASI,OAAO,CAACD,EAAMF,IAAU,CAC3CE,IAAS,KACER,KAAKM,KAKjBE,KAAS,GACPD,EAAaG,KAAKF,GAAQA,IAASF,OAClB,MAGP,GACCD,EAASI,OAAO,CAACD,EAAMF,IAAU,CAC7CE,IAAS,KACER,KAAKM,WAKPlB,OA1BE,+BA6BZ,KACMD,KAGhB,GAAI,QAAS,SAAU,UAAW,wBAChC,GAAI,KAAM,GAAI,UAAW,wBACvB,GAAI,UAAW,eAAgB,QAAS,oBACtC,GAAI,KAAM,kCACWC,OAGvBD,EAASwB,IAAI,CAACH,EAAMF,MAClB,GAAgB,UAAW,MAAO,QAAS,kBAC3CE,EAAKG,IAAI,CAACC,EAAIN,EAAOJ,IAAU,IAC3BU,IAAO,WACA,GAAI,UAAW,SAAU,MAAO,CAACC,gBAAiB,WAAwB,KAAM,GAAGL,EAAKZ,gBAASgB,GAA9BN,MAEpEM,IAAO,WACN,GAAI,UAAW,QAAS,MAAO,CAACC,gBAAiB,WAAyB,KAAM,GAAGL,EAAKZ,gBAASgB,GAA/BN,MANpEA,UA9DL,mGCFf,KAAMQ,MAA2C,CAAEC,QAAQ,GAAIC,cAAc,GAAIC,WAAW,QACzF,GAAI,MAAO,SAAU,QAAS,qBAC5B,GAAI,KAAM,cACR,EAAW,OAAM,MAAO,WAAIF,QAE9B,GAAI,KAAM,cACR,EAAW,oBAAWE,QAExB,GAAI,KAAM,cACR,EAAW,oBACTD,GAAaE,MAAM;AAAA,GAAMP,IAAI,CAACC,EAAIN,wBAE9BM,eADQN,WAX2B,2GCG1Ca,SAAiB,MACfC,GAAQC,aACN,EAAO,mBAASD,KAAU,MAAgBA,EAAME,SACpD,UAHW"}